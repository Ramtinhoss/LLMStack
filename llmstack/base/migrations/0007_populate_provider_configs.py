# Generated by Django 5.0.6 on 2024-07-11 19:48

import logging

from django.db import migrations, models

logger = logging.getLogger(__name__)


def populate_provider_configs(apps, schema_editor):
    from llmstack.base.models import Profile
    from llmstack.processors.providers.anthropic import AnthropicProviderConfig
    from llmstack.processors.providers.azure import AzureProviderConfig
    from llmstack.processors.providers.cohere import CohereProviderConfig
    from llmstack.processors.providers.elevenlabs import ElevenLabsProviderConfig
    from llmstack.processors.providers.google import GoogleProviderConfig
    from llmstack.processors.providers.mistral import MistralProviderConfig
    from llmstack.processors.providers.openai import OpenAIProviderConfig
    from llmstack.processors.providers.stabilityai import StabilityAIProviderConfig

    # Find profiles that have one of [azure_openai_api_key, openai_key, stabilityai_key, cohere_key, elevenlabs_key, google_service_account_json_key, localai_api_key, localai_base_url, anthropic_api_key, mistral_api_key] set
    profiles = Profile.objects.exclude(
        azure_openai_api_key=None,
        openai_key=None,
        stabilityai_key=None,
        cohere_key=None,
        elevenlabs_key=None,
        google_service_account_json_key=None,
        anthropic_api_key=None,
        mistral_api_key=None,
    )

    logger.info(f"Found {profiles.count()} profiles to update")

    for profile in profiles:
        provider_configs = {}
        if profile.azure_openai_api_key:
            provider_configs["azure/*/*/*"] = AzureProviderConfig(
                api_key=profile.decrypt_value(profile.azure_openai_api_key)
            ).model_dump()
        if profile.openai_key:
            provider_configs["openai/*/*/*"] = OpenAIProviderConfig(
                api_key=profile.decrypt_value(profile.openai_key)
            ).model_dump()
        if profile.stabilityai_key:
            provider_configs["stabilityai/*/*/*"] = StabilityAIProviderConfig(
                api_key=profile.decrypt_value(profile.stabilityai_key)
            ).model_dump()
        if profile.cohere_key:
            provider_configs["cohere/*/*/*"] = CohereProviderConfig(
                api_key=profile.decrypt_value(profile.cohere_key)
            ).model_dump()
        if profile.elevenlabs_key:
            provider_configs["elevenlabs/*/*/*"] = ElevenLabsProviderConfig(
                api_key=profile.decrypt_value(profile.elevenlabs_key)
            ).model_dump()
        if profile.google_service_account_json_key:
            provider_configs["google/*/*/*"] = GoogleProviderConfig(
                service_account_json_key=profile.decrypt_value(profile.google_service_account_json_key)
            ).model_dump()
        if profile.anthropic_api_key:
            provider_configs["anthropic/*/*/*"] = AnthropicProviderConfig(
                api_key=profile.decrypt_value(profile.anthropic_api_key)
            ).model_dump()
        if profile.mistral_api_key:
            provider_configs["mistral/*/*/*"] = MistralProviderConfig(
                api_key=profile.decrypt_value(profile.mistral_api_key)
            ).model_dump()

        profile.update_provider_configs(provider_configs)


class Migration(migrations.Migration):

    dependencies = [
        ("base", "0006_alter_defaultprofile_uuid"),
    ]

    operations = [
        migrations.AddField(
            model_name="defaultprofile",
            name="_provider_configs",
            field=models.JSONField(
                blank=True, default=dict, help_text="Encrypted providers config to use with processors", null=True
            ),
        ),
        migrations.RunPython(populate_provider_configs, reverse_code=migrations.RunPython.noop),
    ]
